/* Generated By:JavaCC: Do not edit this line. DotGParser.java */
package org.workcraft.plugins.stg.javacc;

import java.util.HashMap;
import java.util.List;
import java.util.LinkedList;
import java.util.Map;

import org.workcraft.dom.Node;
import org.workcraft.plugins.stg.SignalTransition.Direction;
import org.workcraft.plugins.stg.SignalTransition.Type;
import org.workcraft.plugins.stg.*;
import org.workcraft.util.Pair;
import org.workcraft.util.Triple;
import org.workcraft.exceptions.InvalidConnectionException;
import org.workcraft.exceptions.FormatException;
import org.workcraft.exceptions.NotFoundException;

@SuppressWarnings("all")
public class DotGParser implements DotGParserConstants {
        private Map<String, Type> signals;
        private Map<Pair<Node, Node>, STGPlace> implicitPlaces;
        private STG stg;

        private void init() {
                signals = new HashMap<String, Type>();
                stg = new STG();
                implicitPlaces = new HashMap<Pair<Node, Node>, STGPlace>();
        }

        private Node getOrCreate (String name) {

                Type t = signals.get (name);
                try {
                        return stg.getNodeByReference(name);
                } catch (NotFoundException e) {
                try {
                        return stg.getNodeByReference(name+"/0");
                } catch (NotFoundException ee) {
                        if (t==null)
                                return stg.createPlace(name);
                        else if (t.equals(Type.DUMMY))
                                return stg.createDummyTransition(name);
                        else
                                throw new FormatException (name + " was declared as " + t + ", but is referenced as DUMMY. Transition direction tag (+,-,~) expected.");
                }
                }
        }

        private Node getOrCreate (Pair<String, Integer> ref)
        {
                String reference = stg.makeReference(ref);
                String name = ref.getFirst();
                try {
                        return stg.getNodeByReference (reference);
                } catch (NotFoundException e) {
                        Type t = signals.get (name);
                        if (t == null || !t.equals(Type.DUMMY))
                                throw new FormatException (name + " is referenced as DUMMY but was not declared as such.");
                        else
                        {
                                DummyTransition dt = stg.createDummyTransition(null);
                                stg.setName(dt, reference);
                                dt.setName(name);
                                return dt;
                        }
                }
        }

        private Node getOrCreate (Triple<String, Direction, Integer> ref) {
                String reference = stg.makeReference(ref);
                String name = ref.getFirst();
                try {
                        return stg.getNodeByReference (reference);
                } catch (NotFoundException e) {

                        SignalTransition st = stg.createSignalTransition();
                        stg.setName (st, reference);
                        Type t = signals.get(name);
                        if (t==null)
                                throw new FormatException ("Undeclared signal encountered: " + name +
                                " ("+reference+"). Possibly malformed header.");
                        st.setSignalType(t);
                        return st;

                }
        }

        private void createArc (Node first, Node second) {

                try {
                        ConnectionResult result = stg.connect(first, second);
                        STGPlace implicitPlace = result.getImplicitPlace();

                        if (implicitPlace != null)
                                implicitPlaces.put (Pair.of (first, second), implicitPlace);

                } catch (InvalidConnectionException e)
                {
                        throw new FormatException ("Cannot create arc from " + stg.getNodeReference(first) +
                         " to " + stg.getNodeReference(second) + ".", e);
                }
        }

        private void setSignalsType (List<String> list, Type type) {
                for (String signal : list) {
                        if (signals.containsKey(signal))
                        {
                                Type prevType = signals.get(signal);
                                if (prevType != null && prevType.equals(type))
                                        throw new FormatException (type + " signal \u005c"" + signal + "\u005c" was already listed as " + prevType);
                        }
                        else
                                signals.put(signal, type);
                }
        }

  final public STG parse() throws ParseException {
    if (jj_2_1(3)) {
      jj_consume_token(LINEBREAK);
    } else {
      ;
    }
          init();
    label_1:
    while (true) {
      if (jj_2_2(3)) {
        ;
      } else {
        break label_1;
      }
      header();
      jj_consume_token(LINEBREAK);
    }
    graph();
    label_2:
    while (true) {
      if (jj_2_3(3)) {
        ;
      } else {
        break label_2;
      }
      footer();
      jj_consume_token(LINEBREAK);
    }
    jj_consume_token(0);
          {if (true) return stg;}
    throw new Error("Missing return statement in function");
  }

  final public void header() throws ParseException {
                  List<String> list;
    if (jj_2_4(3)) {
      jj_consume_token(LINEBREAK);
    } else {
      ;
    }
    if (jj_2_6(3)) {
      jj_consume_token(INPUT_HEADER);
      list = signalList();
                                                     setSignalsType (list, Type.INPUT);
    } else if (jj_2_7(3)) {
      jj_consume_token(OUTPUT_HEADER);
      list = signalList();
                                                       setSignalsType (list, Type.OUTPUT);
    } else if (jj_2_8(3)) {
      jj_consume_token(INTERNAL_HEADER);
      list = signalList();
                                                         setSignalsType (list, Type.INTERNAL);
    } else if (jj_2_9(3)) {
      jj_consume_token(DUMMY_HEADER);
      list = signalList();
                                                      setSignalsType (list, Type.DUMMY);
    } else if (jj_2_10(3)) {
      jj_consume_token(UNSUPPORTED_HEADER);
      label_3:
      while (true) {
        if (jj_2_5(3)) {
          ;
        } else {
          break label_3;
        }
        jj_consume_token(ANY);
      }
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public List<String> signalList() throws ParseException {
                              Token t; List<String> list = new LinkedList<String>();
    label_4:
    while (true) {
      if (jj_2_11(3)) {
        ;
      } else {
        break label_4;
      }
      t = jj_consume_token(NAME);
                       list.add (t.image);
    }
         {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final public void footer() throws ParseException {
    if (jj_2_13(3)) {
      jj_consume_token(MARKING);
      marking();
    } else if (jj_2_14(3)) {
      jj_consume_token(CAPACITY);
      capacity();
    } else if (jj_2_15(3)) {
      jj_consume_token(UNSUPPORTED_HEADER);
      label_5:
      while (true) {
        if (jj_2_12(3)) {
          ;
        } else {
          break label_5;
        }
        jj_consume_token(ANY);
      }
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void capacity() throws ParseException {
    label_6:
    while (true) {
      if (jj_2_16(3)) {
        ;
      } else {
        break label_6;
      }
      capacityEntry();
    }
  }

  final public void capacityEntry() throws ParseException {
                         STGPlace p; int value;
    if (jj_2_17(3)) {
      p = implicitPlaceReference();
    } else if (jj_2_18(3)) {
      p = explicitPlaceReference();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    value = assignment();
                p.setCapacity(value);
  }

  final public void marking() throws ParseException {
    jj_consume_token(16);
    label_7:
    while (true) {
      if (jj_2_19(3)) {
        ;
      } else {
        break label_7;
      }
      markingEntry();
    }
    jj_consume_token(17);
  }

  final public int assignment() throws ParseException {
                     Token t;
    jj_consume_token(22);
    t = jj_consume_token(INTEGER);
                            {if (true) return Integer.parseInt(t.image);}
    throw new Error("Missing return statement in function");
  }

  final public void markingEntry() throws ParseException {
                        STGPlace p; int value = 1;
    if (jj_2_20(3)) {
      p = implicitPlaceReference();
    } else if (jj_2_21(3)) {
      p = explicitPlaceReference();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    if (jj_2_22(3)) {
      value = assignment();
    } else {
      ;
    }
                p.setTokens(value);
  }

  final public STGPlace implicitPlaceReference() throws ParseException {
        Node t1, t2;
        Token t;
        Integer tokens = null;
    jj_consume_token(18);
    t1 = anyTransition();
    jj_consume_token(20);
    t2 = anyTransition();
    jj_consume_token(19);
                {if (true) return implicitPlaces.get(Pair.of(t1,t2));}
    throw new Error("Missing return statement in function");
  }

  final public STGPlace explicitPlaceReference() throws ParseException {
        Token t;
        String name;
        Integer tokens = null;
    t = jj_consume_token(NAME);
                       name = t.image;
                {if (true) return (STGPlace) stg.getNodeByReference (name);}
    throw new Error("Missing return statement in function");
  }

  final public void graph() throws ParseException {
    jj_consume_token(GRAPH);
    jj_consume_token(LINEBREAK);
    label_8:
    while (true) {
      graphLine();
      jj_consume_token(LINEBREAK);
      if (jj_2_23(3)) {
        ;
      } else {
        break label_8;
      }
    }
  }

  final public Triple<String, Direction, Integer> signalTransition() throws ParseException {
        Token t;
        String name;
        Direction direction;
        Integer instance = null;
    t = jj_consume_token(NAME);
                     name = t.image;
    t = jj_consume_token(DIRECTION);
                          direction = Direction.fromString(t.image);
    if (jj_2_24(3)) {
      jj_consume_token(21);
      t = jj_consume_token(INTEGER);
                                        instance = Integer.parseInt(t.image);
    } else {
      ;
    }
          {if (true) return Triple.of (name, direction, instance);}
    throw new Error("Missing return statement in function");
  }

  final public Pair<String, Integer> dummyTransition() throws ParseException {
        Token t;
        String name;
        Integer instance = null;
    t = jj_consume_token(NAME);
                     name = t.image;
    if (jj_2_25(3)) {
      jj_consume_token(21);
      t = jj_consume_token(INTEGER);
                               instance = Integer.parseInt(t.image);
    } else {
      ;
    }
          {if (true) return Pair.of (name, instance);}
    throw new Error("Missing return statement in function");
  }

  final public Node anyTransition() throws ParseException {
        Triple<String, Direction, Integer> r;
        Pair<String, Integer> r2;
        Node t;
    if (jj_2_26(3)) {
      r = signalTransition();
                                   t = getOrCreate(r);
    } else if (jj_2_27(3)) {
      r2 = dummyTransition();
                                   t = getOrCreate(r2);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public void graphLine() throws ParseException {
        Token t;
        Node from, to;
    if (jj_2_28(2147483647)) {
      from = anyTransition();
    } else if (jj_2_29(3)) {
      t = jj_consume_token(NAME);
                       from = getOrCreate(t.image);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_9:
    while (true) {
      if (jj_2_30(3)) {
        ;
      } else {
        break label_9;
      }
      if (jj_2_31(2147483647)) {
        to = anyTransition();
      } else if (jj_2_32(3)) {
        t = jj_consume_token(NAME);
                               to = getOrCreate(t.image);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
                    createArc(from, to);
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_3_8() {
    if (jj_scan_token(INTERNAL_HEADER)) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_scan_token(OUTPUT_HEADER)) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3R_12() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_11()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_6() {
    if (jj_scan_token(INPUT_HEADER)) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_scan_token(NAME)) return true;
    if (jj_scan_token(DIRECTION)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_24()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_scan_token(LINEBREAK)) return true;
    return false;
  }

  private boolean jj_3R_10() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_21() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_11()) return true;
    if (jj_scan_token(LINEBREAK)) return true;
    return false;
  }

  private boolean jj_3_23() {
    if (jj_3R_20()) return true;
    if (jj_scan_token(LINEBREAK)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_10()) return true;
    if (jj_scan_token(LINEBREAK)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(LINEBREAK)) return true;
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  private boolean jj_3_18() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3_31() {
    if (jj_scan_token(NAME)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(14)) {
    jj_scanpos = xsp;
    if (jj_scan_token(21)) return true;
    }
    return false;
  }

  private boolean jj_3_32() {
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_scan_token(18)) return true;
    if (jj_3R_24()) return true;
    if (jj_scan_token(20)) return true;
    return false;
  }

  private boolean jj_3_30() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3_32()) return true;
    }
    return false;
  }

  private boolean jj_3_28() {
    if (jj_scan_token(NAME)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(14)) {
    jj_scanpos = xsp;
    if (jj_scan_token(21)) return true;
    }
    return false;
  }

  private boolean jj_3_22() {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3_20() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3_29() {
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_20()) {
    jj_scanpos = xsp;
    if (jj_3_21()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3_22()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3_29()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_30()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_scan_token(22)) return true;
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  private boolean jj_3_19() {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_scan_token(ANY)) return true;
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_scan_token(16)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_19()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(17)) return true;
    return false;
  }

  private boolean jj_3_17() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3_27() {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3_26() {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(ANY)) return true;
    return false;
  }

  private boolean jj_3R_24() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_26()) {
    jj_scanpos = xsp;
    if (jj_3_27()) return true;
    }
    return false;
  }

  private boolean jj_3R_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3_18()) return true;
    }
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_14() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_16()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_25() {
    if (jj_scan_token(21)) return true;
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_scan_token(NAME)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_25()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_scan_token(UNSUPPORTED_HEADER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_12()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_14() {
    if (jj_scan_token(CAPACITY)) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_scan_token(MARKING)) return true;
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3R_11() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3_15()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_24() {
    if (jj_scan_token(21)) return true;
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_scan_token(UNSUPPORTED_HEADER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_5()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_11() {
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_scan_token(DUMMY_HEADER)) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public DotGParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[32];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public DotGParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public DotGParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new DotGParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public DotGParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new DotGParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public DotGParser(DotGParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(DotGParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[24];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 24; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 32; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
