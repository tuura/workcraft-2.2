/* Generated By:JavaCC: Do not edit this line. BreezeParserTokenManager.java */
package org.workcraft.parsers.breeze.javacc;
import org.workcraft.parsers.breeze.*;
import org.workcraft.parsers.breeze.dom.*;
import org.workcraft.parsers.breeze.expressions.*;
import java.io.InputStream;
import java.util.List;
import java.util.LinkedList;
import java.util.ArrayList;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import pcollections.*;

/** Token Manager. */
@SuppressWarnings("all")
public class BreezeParserTokenManager implements BreezeParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x1e0000000L) != 0L)
            return 8;
         if ((active0 & 0x80L) != 0L)
            return 9;
         if ((active0 & 0x2000000000L) != 0L)
            return 7;
         if ((active0 & 0xffde1ffffd40L) != 0L)
         {
            jjmatchedKind = 51;
            return 7;
         }
         return -1;
      case 1:
         if ((active0 & 0x1e0000000L) != 0L)
            return 8;
         if ((active0 & 0xffde1ffdfd40L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 1;
            return 7;
         }
         if ((active0 & 0x20000L) != 0L)
            return 7;
         return -1;
      case 2:
         if ((active0 & 0x1e0000000L) != 0L)
            return 8;
         if ((active0 & 0xffde1ffdcd40L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 51;
               jjmatchedPos = 2;
            }
            return 7;
         }
         if ((active0 & 0x3000L) != 0L)
            return 7;
         return -1;
      case 3:
         if ((active0 & 0x1e0000000L) != 0L)
            return 8;
         if ((active0 & 0xbe181f8ddd40L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 51;
               jjmatchedPos = 3;
            }
            return 7;
         }
         if ((active0 & 0x41c600700000L) != 0L)
            return 7;
         return -1;
      case 4:
         if ((active0 & 0x1e0000000L) != 0L)
            return 8;
         if ((active0 & 0xbe181fc1cd40L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 51;
               jjmatchedPos = 4;
            }
            return 7;
         }
         if ((active0 & 0x1c1000L) != 0L)
            return 7;
         return -1;
      case 5:
         if ((active0 & 0x1e0000000L) != 0L)
            return 8;
         if ((active0 & 0x3e100dc58940L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 51;
               jjmatchedPos = 5;
            }
            return 7;
         }
         if ((active0 & 0x800812004400L) != 0L)
            return 7;
         return -1;
      case 6:
         if ((active0 & 0x1e0000000L) != 0L)
            return 8;
         if ((active0 & 0x3e180dc58140L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 6;
            return 7;
         }
         if ((active0 & 0x800L) != 0L)
            return 7;
         return -1;
      case 7:
         if ((active0 & 0x1e0000000L) != 0L)
            return 8;
         if ((active0 & 0x3c180dc58140L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 7;
            return 7;
         }
         if ((active0 & 0x20000000000L) != 0L)
            return 7;
         return -1;
      case 8:
         if ((active0 & 0x1a0000000L) != 0L)
            return 8;
         if ((active0 & 0x24180d858140L) != 0L)
         {
            if (jjmatchedPos != 8)
            {
               jjmatchedKind = 51;
               jjmatchedPos = 8;
            }
            return 7;
         }
         if ((active0 & 0x180000400000L) != 0L)
            return 7;
         return -1;
      case 9:
         if ((active0 & 0x180000000L) != 0L)
            return 8;
         if ((active0 & 0x20180d810140L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 9;
            return 7;
         }
         if ((active0 & 0xc0000048000L) != 0L)
            return 7;
         return -1;
      case 10:
         if ((active0 & 0x180000000L) != 0L)
            return 8;
         if ((active0 & 0x180d810140L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 10;
            return 7;
         }
         if ((active0 & 0x200000000000L) != 0L)
            return 7;
         return -1;
      case 11:
         if ((active0 & 0x180000000L) != 0L)
            return 8;
         if ((active0 & 0x180d000140L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 11;
            return 7;
         }
         if ((active0 & 0x810000L) != 0L)
            return 7;
         return -1;
      case 12:
         if ((active0 & 0x180000000L) != 0L)
            return 8;
         if ((active0 & 0x1009000140L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 12;
            return 7;
         }
         if ((active0 & 0x804000000L) != 0L)
            return 7;
         return -1;
      case 13:
         if ((active0 & 0x180000000L) != 0L)
            return 8;
         if ((active0 & 0x1000100L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 13;
            return 7;
         }
         if ((active0 & 0x1008000040L) != 0L)
            return 7;
         return -1;
      case 14:
         if ((active0 & 0x80000000L) != 0L)
            return 8;
         if ((active0 & 0x1000100L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 14;
            return 7;
         }
         return -1;
      case 15:
         if ((active0 & 0x1000100L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 15;
            return 7;
         }
         return -1;
      case 16:
         if ((active0 & 0x100L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 16;
            return 7;
         }
         if ((active0 & 0x1000000L) != 0L)
            return 7;
         return -1;
      case 17:
         if ((active0 & 0x100L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 17;
            return 7;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 34:
         return jjMoveStringLiteralDfa1_0(0x1e0000000L);
      case 35:
         return jjMoveStringLiteralDfa1_0(0x20000L);
      case 40:
         return jjStopAtPos(0, 48);
      case 41:
         return jjStopAtPos(0, 49);
      case 43:
         return jjStartNfaWithStates_0(0, 37, 7);
      case 48:
         return jjStartNfaWithStates_0(0, 7, 9);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x40001800400L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x200000000000L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x1a0204000000L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x400000000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x800008003000L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x1000018000L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x4000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x180003c0840L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x4812400000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x400000000000L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x100L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 66:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000L);
      case 85:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000c8900L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000400L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000L);
      case 102:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(1, 17, 7);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x800008000000L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x3000L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x180000300000L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x200001800040L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x40810000000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x19000014000L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x404002400000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x20020000000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000040L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x181002018000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x4104400000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000L);
      case 112:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 13;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0xc00008001000L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x811bc0100L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x8600000800L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000004400L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x1018c0000L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x1002000000L);
      case 99:
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x400000L);
      case 101:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(3, 33, 7);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 34, 7);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 46, 7);
         return jjMoveStringLiteralDfa4_0(active0, 0x200000018000L);
      case 104:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 39, 7);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x810000500L);
      case 108:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 40, 7);
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000L);
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x40L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x20080000000L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x800040000000L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x180000004000L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x40020000000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x800L);
      case 116:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x4100000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000100L);
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x20008000L);
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0x1008000000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000840L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000L);
      case 109:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x40000L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x20810000000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x180002000000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x800104010000L);
      case 115:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(4, 20, 7);
         break;
      case 116:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(4, 12, 7);
         break;
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x400L);
      case 121:
         return jjMoveStringLiteralDfa5_0(active0, 0x1800000L);
      case 122:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000L);
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000100L);
      case 101:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(5, 10, 7);
         return jjMoveStringLiteralDfa6_0(active0, 0x220045840000L);
      case 103:
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x20010000L);
      case 108:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(5, 25, 7);
         break;
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x180000000000L);
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x1080000000L);
      case 116:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(5, 14, 7);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 47, 7);
         return jjMoveStringLiteralDfa6_0(active0, 0x40L);
      case 118:
         return jjMoveStringLiteralDfa6_0(active0, 0x800L);
      case 121:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa7_0(active0, 0x201804000000L);
      case 79:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000L);
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0x1800000L);
      case 101:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(6, 11, 7);
         return jjMoveStringLiteralDfa7_0(active0, 0x180008000000L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x40L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000100L);
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000L);
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x48000L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000000L);
      case 121:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa8_0(active0, 0x1810000L);
      case 62:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000L);
      case 79:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000000L);
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x820000000L);
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0x40100L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x180048000000L);
      case 112:
         return jjMoveStringLiteralDfa8_0(active0, 0x200100000000L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000L);
      case 115:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 41, 7);
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000L);
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000000L);
      case 118:
         return jjMoveStringLiteralDfa8_0(active0, 0x40L);
      case 121:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 34:
         if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(8, 30);
         break;
      case 45:
         return jjMoveStringLiteralDfa9_0(active0, 0x100L);
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000000000L);
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0x40100000040L);
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000000L);
      case 112:
         return jjMoveStringLiteralDfa9_0(active0, 0x880808000L);
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0x40000L);
      case 115:
         return jjMoveStringLiteralDfa9_0(active0, 0x1001000000L);
      case 116:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(8, 22, 7);
         else if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0x8000c010000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 34:
         if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(9, 29);
         break;
      case 45:
         return jjMoveStringLiteralDfa10_0(active0, 0x40L);
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000100L);
      case 101:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(9, 15, 7);
         return jjMoveStringLiteralDfa10_0(active0, 0x80000000L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x800000L);
      case 112:
         return jjMoveStringLiteralDfa10_0(active0, 0x800000000L);
      case 114:
         return jjMoveStringLiteralDfa10_0(active0, 0x200104000000L);
      case 115:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(9, 18, 7);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 42, 7);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 43, 7);
         break;
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000000000L);
      case 121:
         return jjMoveStringLiteralDfa10_0(active0, 0x1010000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0x100000000L);
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x800000000L);
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x4000000L);
      case 110:
         return jjMoveStringLiteralDfa11_0(active0, 0x1000000L);
      case 112:
         return jjMoveStringLiteralDfa11_0(active0, 0x10040L);
      case 114:
         return jjMoveStringLiteralDfa11_0(active0, 0x1080800100L);
      case 116:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 45, 7);
         return jjMoveStringLiteralDfa11_0(active0, 0x8000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0x80000040L);
      case 99:
         return jjMoveStringLiteralDfa12_0(active0, 0x1000000L);
      case 101:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(11, 16, 7);
         break;
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0x1008000000L);
      case 110:
         return jjMoveStringLiteralDfa12_0(active0, 0x804000000L);
      case 114:
         return jjMoveStringLiteralDfa12_0(active0, 0x100L);
      case 116:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(11, 23, 7);
         return jjMoveStringLiteralDfa12_0(active0, 0x100000000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0);
      return 12;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa13_0(active0, 0x1000000L);
      case 97:
         return jjMoveStringLiteralDfa13_0(active0, 0x100L);
      case 100:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(12, 35, 7);
         break;
      case 103:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(12, 26, 7);
         break;
      case 110:
         return jjMoveStringLiteralDfa13_0(active0, 0x1000000000L);
      case 111:
         return jjMoveStringLiteralDfa13_0(active0, 0x108000000L);
      case 114:
         return jjMoveStringLiteralDfa13_0(active0, 0x40L);
      case 116:
         return jjMoveStringLiteralDfa13_0(active0, 0x80000000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0);
      return 13;
   }
   switch(curChar)
   {
      case 103:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 36, 7);
         break;
      case 110:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(13, 27, 7);
         break;
      case 111:
         return jjMoveStringLiteralDfa14_0(active0, 0x80000000L);
      case 112:
         return jjMoveStringLiteralDfa14_0(active0, 0x1000000L);
      case 114:
         return jjMoveStringLiteralDfa14_0(active0, 0x100000000L);
      case 116:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(13, 6, 7);
         break;
      case 121:
         return jjMoveStringLiteralDfa14_0(active0, 0x100L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0);
      return 14;
   }
   switch(curChar)
   {
      case 34:
         if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(14, 32);
         break;
      case 45:
         return jjMoveStringLiteralDfa15_0(active0, 0x100L);
      case 111:
         return jjMoveStringLiteralDfa15_0(active0, 0x1000000L);
      case 114:
         return jjMoveStringLiteralDfa15_0(active0, 0x80000000L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0);
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0);
      return 15;
   }
   switch(curChar)
   {
      case 34:
         if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(15, 31);
         break;
      case 114:
         return jjMoveStringLiteralDfa16_0(active0, 0x1000000L);
      case 116:
         return jjMoveStringLiteralDfa16_0(active0, 0x100L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0);
}
private int jjMoveStringLiteralDfa16_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0);
      return 16;
   }
   switch(curChar)
   {
      case 116:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(16, 24, 7);
         break;
      case 121:
         return jjMoveStringLiteralDfa17_0(active0, 0x100L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0);
}
private int jjMoveStringLiteralDfa17_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(15, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0);
      return 17;
   }
   switch(curChar)
   {
      case 112:
         return jjMoveStringLiteralDfa18_0(active0, 0x100L);
      default :
         break;
   }
   return jjStartNfa_0(16, active0);
}
private int jjMoveStringLiteralDfa18_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(16, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0);
      return 18;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(18, 8, 7);
         break;
      default :
         break;
   }
   return jjStartNfa_0(17, active0);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 8;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffcfaffffd9ffL & l) != 0L)
                  {
                     if (kind > 51)
                        kind = 51;
                     jjCheckNAdd(7);
                  }
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(5, 6);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 9)
                        kind = 9;
                     jjCheckNAdd(3);
                  }
                  else if (curChar == 45)
                     jjCheckNAdd(3);
                  else if (curChar == 59)
                  {
                     if (kind > 5)
                        kind = 5;
                     jjCheckNAdd(1);
                  }
                  break;
               case 9:
                  if ((0xfffffcfaffffd9ffL & l) != 0L)
                  {
                     if (kind > 51)
                        kind = 51;
                     jjCheckNAdd(7);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 9)
                        kind = 9;
                     jjCheckNAdd(3);
                  }
                  break;
               case 8:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(5, 6);
                  else if (curChar == 34)
                  {
                     if (kind > 50)
                        kind = 50;
                  }
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjCheckNAdd(1);
                  break;
               case 2:
                  if (curChar == 45)
                     jjCheckNAdd(3);
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjCheckNAdd(3);
                  break;
               case 4:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(5, 6);
                  break;
               case 5:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(5, 6);
                  break;
               case 6:
                  if (curChar == 34 && kind > 50)
                     kind = 50;
                  break;
               case 7:
                  if ((0xfffffcfaffffd9ffL & l) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  jjCheckNAdd(7);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 7:
                  if (kind > 51)
                     kind = 51;
                  jjCheckNAdd(7);
                  break;
               case 9:
                  if (kind > 51)
                     kind = 51;
                  jjCheckNAdd(7);
                  break;
               case 8:
               case 5:
                  jjCheckNAddTwoStates(5, 6);
                  break;
               case 1:
                  if (kind > 5)
                     kind = 5;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 7:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  jjCheckNAdd(7);
                  break;
               case 9:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  jjCheckNAdd(7);
                  break;
               case 8:
               case 5:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(5, 6);
                  break;
               case 1:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 8 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, 
"\160\162\151\155\151\164\151\166\145\55\160\141\162\164", "\60", 
"\166\141\162\151\141\142\154\145\55\141\162\162\141\171\55\164\171\160\145", null, "\141\143\164\151\166\145", "\160\141\163\163\151\166\145", 
"\151\156\160\165\164", "\151\156\160", "\157\165\164\160\165\164", 
"\156\141\155\145\144\55\164\171\160\145", "\156\165\155\145\162\151\143\55\164\171\160\145", "\43\146", 
"\160\141\162\141\155\145\164\145\162\163", "\160\141\162\141\155", "\160\157\162\164\163", "\160\157\162\164", 
"\163\171\156\143\55\160\157\162\164", "\141\162\162\141\171\145\144\55\160\157\162\164", 
"\141\162\162\141\171\145\144\55\163\171\156\143\55\160\157\162\164", "\163\171\155\142\157\154", 
"\143\145\156\164\162\145\55\163\164\162\151\156\147", "\151\155\160\154\145\155\145\156\164\141\164\151\157\156", 
"\163\164\162\151\156\147", "\42\143\141\162\144\151\156\141\154\42", 
"\42\142\157\157\154\145\141\156\42", "\42\102\151\156\141\162\171\117\160\145\162\141\164\157\162\42", 
"\42\125\156\141\162\171\117\160\145\162\141\164\157\162\42", "\143\141\163\145", "\145\154\163\145", 
"\163\164\162\151\156\147\55\141\160\160\145\156\144", "\156\165\155\142\145\162\55\76\163\164\162\151\156\147", "\53", 
"\163\171\156\143", "\160\165\163\150", "\160\165\154\154", "\143\150\141\156\156\145\154\163", 
"\141\164\164\162\151\142\165\164\145\163", "\143\157\155\160\157\156\145\156\164\163", 
"\143\157\155\160\157\156\145\156\164", "\142\162\145\145\172\145\55\160\141\162\164", "\164\171\160\145", 
"\151\155\160\157\162\164", "\50", "\51", null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xfffffffffffc1L, 
};
static final long[] jjtoSkip = {
   0x3eL, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[8];
private final int[] jjstateSet = new int[16];
protected char curChar;
/** Constructor. */
public BreezeParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public BreezeParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 8; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

}
