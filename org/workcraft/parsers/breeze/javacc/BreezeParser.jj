/**
 * JavaCC file
 */
 
options {
  JDK_VERSION = "1.5";
  LOOKAHEAD = 3;
}

PARSER_BEGIN(BreezeParser)
package org.workcraft.parsers.breeze.javacc;

import org.workcraft.parsers.lisp.LispNode;
import org.workcraft.parsers.breeze.*;


import java.io.InputStream;
import java.util.List;
import java.util.LinkedList;
import java.util.ArrayList;
import java.io.BufferedReader;
import java.io.InputStreamReader;
 
public class BreezeParser {
	public static LispNode parse (InputStream is) throws ParseException {
		BreezeParser parser = new BreezeParser(new BufferedReader(new InputStreamReader(is)));
		return parser.listElement();
	}

	public static PrimitivePart parsePrimitivePart(InputStream is) throws ParseException	{
	  BreezeParser parser = new BreezeParser(new BufferedReader(new InputStreamReader(is)));
	  return parser.primitivePart();
	}
 	
	public static List<BreezePart> parseBreezeParts(InputStream is) throws ParseException
	{
		BreezeParser parser = new BreezeParser(new BufferedReader(new InputStreamReader(is)));
		return parser.breezeFile();
	}
}
PARSER_END(BreezeParser)

SKIP :
{
 	" "
|	"\r"
|	"\t"
|	"\n"
|	<";" (~["\r","\n"])*>
}

TOKEN :
{
  	<PRIMITIVE_PART : "primitive-part" >
    |<ZERO : "0">
  	|<VARIABLE_ARRAY_TYPE : "variable-array-type">
  	|<INTEGER : ("-")?(["0"-"9"])+>
  	|<ACTIVE : "active">
  	|<PASSIVE : "passive">
  	|<INPUT : "input">
  	|<INP : "inp">
  	|<OUTPUT : "output">
  	|<NAMED_TYPE : "named-type">
  	|<NUMERIC_TYPE : "numeric-type">
  	|<BOOL_FALSE :"#f">
 	|<PARAMETERS :  "parameters" >
  	|<PARAM :  "param">
 	|<PORTS :  "ports" >
 	|<PORT :  "port" >
 	|<SYNC_PORT :  "sync-port" >
 	|<ARRAYED_PORT :  "arrayed-port" >
 	|<ARRAYED_SYNC_PORT :  "arrayed-sync-port" >
 	|<SYMBOL :  "symbol" >
 	|<CENTER_STRING :  "centre-string" >
	|<IMPLEMENTATION :  "implementation" > 
	|<TYPE_STRING : "string">	
	|<TYPE_CARDINAL : "\"cardinal\"">
	|<TYPE_BOOLEAN : "\"boolean\"">
	|<CASE : "case">
	|<ELSE : "else">
	|<STRING_APPEND : "string-append">
	|<NUMBER_TO_STRING : "number->string">
	|<PLUS : "+">
	
	|<SYNC : "sync">
	|<PUSH : "push">
	|<PULL : "pull">
	|<CHANNELS : "channels">
	|<ATTRIBUTES : "attributes">
	|<COMPONENTS : "components">
	|<COMPONENT : "component">
	|<BREEZE_PART : "breeze-part">
	|<TYPE : "type">
	|<IMPORT : "import">
	
	|<OBR : "(" >
	|<CBR : ")" >
	|<QUOTED_VALUE: "\"" (~["\""])* "\"" >
    |<VALUE: ( ~[" ","\r","\t","\n","(",")","\""] )+ >
}

List<LispNode> listBody() : 
{
	ArrayList<LispNode> result = new ArrayList<LispNode>();
	LispNode o;
}
{
  ( o = listElement() {result.add(o);})*
  {
   return result;
  }
}

LispNode list() : 
{
	List<LispNode> result;
}
{
  <OBR> result = listBody() <CBR>
  {
   return new LispNode(result);
  }
}

String value() : {Token t;}
{
	  t = <VALUE> { return t.image; }
	| t = <QUOTED_VALUE> { return t.image.substring(1, t.image.length()-1); }
	| t = keyword() { return t.image; }
	| t = integerToken() { return t.image; } 
}
LispNode listElement() : { String t; LispNode l;}
{
	  t = value() { return new LispNode(t); }
	| l = list() { return l; } 
}

Token keyword() : {Token t;}
{
  	(t = <PRIMITIVE_PART> 
  	| t = <VARIABLE_ARRAY_TYPE>
  	| t = <ACTIVE>
  	| t = <PASSIVE>
  	| t = <INPUT>
  	| t = <INP>
  	| t = <OUTPUT>
  	| t = <NAMED_TYPE>
  	| t = <NUMERIC_TYPE>
  	| t = <BOOL_FALSE>
 	| t = <PARAMETERS>
  	| t = <PARAM>
 	| t = <PORTS>
 	| t = <PORT>
 	| t = <SYNC_PORT>
 	| t = <ARRAYED_PORT>
 	| t = <ARRAYED_SYNC_PORT>
 	| t = <SYMBOL>
 	| t = <CENTER_STRING>
	| t = <IMPLEMENTATION> 
	| t = <TYPE_STRING>	
	| t = <TYPE_CARDINAL>
	| t = <TYPE_BOOLEAN>
	| t = <CASE>
	| t = <ELSE>
	| t = <STRING_APPEND>
	| t = <NUMBER_TO_STRING>
	| t = <PLUS>
	
	| t = <SYNC>
	| t = <PUSH>
	| t = <PULL>
	| t = <CHANNELS>
	| t = <ATTRIBUTES>
	| t = <COMPONENTS>
	| t = <COMPONENT>
	| t = <BREEZE_PART>
	| t = <TYPE>
	| t = <IMPORT>
	)
	
	{ return t; } 	
}

ParameterType type() : { ParameterType result; String typeName; }
{
	(<OBR>
	( 
		<TYPE_STRING> { result = ParameterType.STRING; }
		|
		<NAMED_TYPE> 
		(
			<TYPE_CARDINAL> { result = ParameterType.CARDINAL; }
			|
			<TYPE_BOOLEAN> { result = ParameterType.BOOLEAN; }
			|
			typeName = value() {result = ParameterType.OTHER; }
		)
		
	)
	<CBR>
	| numericType() { result = ParameterType.CARDINAL; })
	{ return result; }
}

ParameterDeclaration parameter() :
{
  String name;
  ParameterType type;}
{
	<OBR> name = value() type = type() listBody() <CBR>
	{ return new ParameterDeclaration (name, type); }}

List<ParameterDeclaration> parameters() :
{
   ArrayList<ParameterDeclaration> result = new ArrayList<ParameterDeclaration>();
   ParameterDeclaration o;
}
{
 <OBR> <PARAMETERS>
( o = parameter() {result.add(o);})* 
 <CBR>
 { return result; }}

boolean dataDirectionIsInput() : {}
{
	(<INPUT>|<INP>) { return true; }
	| <OUTPUT> { return false; }
} 

Token integerToken() :
{ Token t; }
{
	(t = <INTEGER> | t = <ZERO>) { return t; }
}

int integer() :
{
	Token t;
}
{
	(t = integerToken())
	{
		return Integer.parseInt(t.image);
	}
}

Expression<Integer> constantIntegerExpression() :
{
	int result;
}
{
	result = integer()
	{ return new Constant<Integer>(result); }
}

Expression<String> constantStringExpression() :
{
	String s;
}
{
	s = value()
 { return new Constant<String>(s); }
}

Expression<?> parameterizedExpression() :
{
	String paramName;
}
{
	<OBR> <PARAM>
		paramName = value()
	<CBR>
	{ return new ParameterReference<Object>(paramName); }
}

Expression<String> numberToStringExpression() :
{ Expression<Integer> intExpression; }
{
	<OBR>
		<NUMBER_TO_STRING>
		intExpression = integerExpression()
	<CBR>
	{ return new ToStringExpression<Integer>(intExpression); }
}

Expression<String> stringAppendExpression() :
{
	Expression<String> result;
	Expression<String> str2;
}
{
	<OBR>
		<STRING_APPEND>
		stringAppendBody()
		result = stringAppendBody()
	<CBR>
	{ return result; }
}

Expression<String> stringAppendBody() :
{
	Expression<String> str;
	List<Expression<String>> strs = new ArrayList<Expression<String>>();
}
{
	(str = stringExpression() { strs.add(str); })*
	{ return new StringConcatenateExpression(strs); }
}

Expression<String> stringCaseExpression() :
{
	Expression<String> condition;
	Expression<String> value;
	
	Expression<String> toCheck;
	List<Expression<String>> conditions = new ArrayList<Expression<String>>();
	List<Expression<String>> values = new ArrayList<Expression<String>>();
	Expression<String> elseValue;
}
{
	<OBR>
		<CASE>
		toCheck = stringExpression()
		
		(
			<OBR>
				<OBR>
					condition = stringExpression()
				<CBR>
				value = stringExpression()
			<CBR>
			{ conditions.add(condition); values.add(value); }
		)*
		<OBR>
			<ELSE>
			elseValue = stringExpression()
		<CBR>
	<CBR>
	{ return new CaseExpression<String, String>(toCheck, conditions, values, elseValue); }
}

Expression<Integer> addExpression() : 
{
	List<Expression<Integer>> args = new ArrayList<Expression<Integer>>();
}
{
	<OBR>
		<PLUS>
		(integerExpression())*
	<CBR>
	{
		return new AddExpression(args);
	}
}


Expression<Integer> integerExpression() :
{
	Expression<?> result;
}
{
	(
		result = parameterizedExpression() |
		result = constantIntegerExpression() |
		result = addExpression()
	)
	{return (Expression<Integer>)result;}
}

Expression<String> implicitNumberToString() :
{
	Expression<Integer> res;
}
{
	res = integerExpression()
	{return new ToStringExpression(res);}
} 

Expression<String> stringExpression() :
{
	Expression<?> result;
}
{
	(
		result = parameterizedExpression() |
		result = constantStringExpression() |
		result = stringCaseExpression() |
		result = stringAppendExpression() |
		result = numberToStringExpression() |
		result = implicitNumberToString()
	)

	{return (Expression<String>) result;}
}

Expression<Integer> numericType() :
{
	Expression<Integer> result; 
}
{
	<OBR> <NUMERIC_TYPE> <BOOL_FALSE>
		result = integerExpression()
	<CBR>
	{
		return result;		
	}
}

VariableArrayType variable_array_type() :
{
	Expression<Integer> defaultWidth;
	Expression<Integer> portCount;
	Expression<String> specification;
}
{
	<OBR> <VARIABLE_ARRAY_TYPE>
	defaultWidth = numericType()
	<ZERO>
	portCount = integerExpression()
	specification = stringExpression()
	<CBR>
	{ return new VariableArrayType(defaultWidth, portCount, specification); }
}

boolean isActive() : {}
{
	<ACTIVE> { return true; }
	| <PASSIVE> { return false; }
}

Expression<Integer> arrayCount() : {}
{
	<ZERO>
	{ return integerExpression(); }
}

PortDeclaration port() : 
{
	boolean isArrayed = false;
	Expression<Integer> count = new Constant<Integer>(1);
	PortType type = PortType.SYNC;
	String name = null;
	boolean isActive = false;
	boolean isInput = false;
	Expression<Integer> simpleWidth = null;
	Expression<Integer[]> width = null;
}
{
	<OBR>

	(
		(
			<PORT> { type = PortType.DATA; }
			name = value()
			isActive = isActive()
			isInput = dataDirectionIsInput()
			simpleWidth = numericType()
		|
			<SYNC_PORT> { type = PortType.SYNC; }
			name = value()
			isActive = isActive()
		)
		{ isArrayed = false; }
	
	| 
	
	 	(
	 		<ARRAYED_PORT> { type = PortType.DATA; }
			name = value()
			isActive = isActive()
			isInput = dataDirectionIsInput()
			(width = variable_array_type() | simpleWidth = numericType())
		|
			<ARRAYED_SYNC_PORT> { type = PortType.SYNC; }
			name = value()
			isActive = isActive()
		)
		count = arrayCount()
		{ isArrayed = true; }
	)
	
	listBody()
	<CBR>
	{
		if(!isArrayed || width == null)
			width = new ConstantArrayType(simpleWidth, count);
		return new PortDeclaration(type, name, isActive, isInput, isArrayed, count, width); 
	}
}

List<PortDeclaration> ports() :
{
	ArrayList<PortDeclaration> result = new ArrayList<PortDeclaration>();
	PortDeclaration o;
}
{
 <OBR> <PORTS>
	( o = port() {result.add(o);})* 
 <CBR>
 	{return result;}
}

Expression<String> symbol() : { Expression<String> str; }
{
	<OBR>
		<SYMBOL>
		<OBR>
			<CENTER_STRING>
			str = stringAppendBody()
		<CBR>
	<CBR>
	{ return str; }
}

PrimitivePart primitivePart() :{
	String name;
	List<ParameterDeclaration> parameters;
	Expression<String> symbol;
	List<PortDeclaration> ports;
}{
  <OBR> <PRIMITIVE_PART>
  	name = value()
  	parameters = parameters()
  	ports = ports()
  	symbol = symbol()
  	listBody()
  <CBR>
  { return new PrimitivePart(name, parameters, ports, symbol); }
}

void attributes() : {}
{
	list()
}

ChannelDeclaration channel() :
{
	ChannelType type;
	int bits = 0;
}
{
	<OBR>
	(
		<SYNC> { type = ChannelType.SYNC; }
		| 
		(<PULL> { type = ChannelType.PULL; }
		 | <PUSH> { type = ChannelType.PUSH; })
		bits = integer()
	)
	listBody()
	<CBR>
	{ return new ChannelDeclaration(type, bits); }
}


List<ChannelDeclaration> channels() : 
{
	List<ChannelDeclaration> list = new ArrayList<ChannelDeclaration>();
	ChannelDeclaration channel;
}
{
	<OBR><CHANNELS>
	(channel = channel() { list.add(channel); } )*
	<CBR>
	{ return list; }
}

List<String> paramValues() :
{
	List<String> values = new ArrayList<String>();
	String value;
}
{
	<OBR>
	(value = value() {values.add(value);})*
	<CBR>
	{return values;}
}

List<List<Integer>> connections() : 
{
	List<List<Integer>> result = new ArrayList<List<Integer>>();
	List<Integer> subList;
}
{
	<OBR>
	(subList = intList() {result.add(subList);})*
	<CBR>
	{return result;}
}

List<Integer> intList() :
{
	List<Integer> result;
	int val;
}
{
	(
		result = plainIntList()
		|
		val = integer() { result = new LinkedList<Integer>(); result.add(val); }  
	)
	{ return result; }
} 

List<Integer> plainIntList() : 
{
	List<Integer> result = new ArrayList<Integer>();
	Integer value;
}
{
	<OBR>
	(value = integer() {result.add(value);})*
	<CBR>
	{return result;}
}

RawBreezePartReference component() :
{
	String name;
	List<String> parameters;
	List<List<Integer>> connections;
}
{
	<OBR><COMPONENT>
	name = value()
	parameters = paramValues()
	connections = connections()
	<CBR>
	{
		return new RawBreezePartReference(name, parameters, connections);
	}
}

List<RawBreezePartReference> components() :
{
	List<RawBreezePartReference> list = new ArrayList<RawBreezePartReference>();
	RawBreezePartReference part;
}
{
	<OBR><COMPONENTS>
	(part = component() {list.add(part);})*
	<CBR>
	{return list;}
}

BreezePart breezePart() :
{
	String name;
	List<PortDeclaration> ports;
	List<ChannelDeclaration> channels;
	List<RawBreezePartReference> components;
}
{
	<OBR><BREEZE_PART>
	name = value()
	ports = ports()
	attributes()
	channels = channels()
	components = components()
	listBody()
	<CBR>
	{ return new BreezePart(name, ports, channels, components);}
}

void typeDefinition() : {}
{
	<OBR><TYPE>
		listBody()
	<CBR>
}

void breezeDef(List<BreezePart> defs) : {BreezePart def;}
{
	typeDefinition()
	|
	def = breezePart()
	{ defs.add(def); }
}

void importDef() : {}
{
	<OBR><IMPORT>
	listBody()
	<CBR>
}

List<BreezePart> breezeFile() : { List<BreezePart > defs = new LinkedList<BreezePart >();}
{
	(importDef())*
	(breezeDef(defs))*
	{return defs;}}
