/* Generated By:JavaCC: Do not edit this line. BreezeParser.java */
package org.workcraft.parsers.breeze.javacc;

import org.workcraft.parsers.breeze.*;
import org.workcraft.parsers.breeze.dom.*;
import org.workcraft.parsers.breeze.expressions.*;

import java.io.InputStream;
import java.util.List;
import java.util.LinkedList;
import java.util.ArrayList;
import java.io.BufferedReader;
import java.io.InputStreamReader;

public class BreezeParser implements BreezeParserConstants {
        public static LispNode parse (InputStream is) throws ParseException {
                BreezeParser parser = new BreezeParser(new BufferedReader(new InputStreamReader(is)));
                return parser.listElement();
        }

        public static PrimitivePart parsePrimitivePart(InputStream is) throws ParseException
        {
          BreezeParser parser = new BreezeParser(new BufferedReader(new InputStreamReader(is)));
          return parser.primitivePart();
        }

        public static List<BreezePart> parseBreezeParts(InputStream is) throws ParseException
        {
                BreezeParser parser = new BreezeParser(new BufferedReader(new InputStreamReader(is)));
                return parser.breezeFile();
        }

  final public List<LispNode> listBody() throws ParseException {
        ArrayList<LispNode> result = new ArrayList<LispNode>();
        LispNode o;
    label_1:
    while (true) {
      if (jj_2_1(3)) {
        ;
      } else {
        break label_1;
      }
      o = listElement();
                       result.add(o);
    }
   {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public LispNode list() throws ParseException {
        List<LispNode> result;
    jj_consume_token(OBR);
    result = listBody();
    jj_consume_token(CBR);
   {if (true) return new LispNode(result);}
    throw new Error("Missing return statement in function");
  }

  final public String value() throws ParseException {
                  Token t;
    if (jj_2_2(3)) {
      t = jj_consume_token(VALUE);
                        {if (true) return t.image;}
    } else if (jj_2_3(3)) {
      t = jj_consume_token(QUOTED_VALUE);
                               {if (true) return t.image.substring(1, t.image.length()-1);}
    } else if (jj_2_4(3)) {
      t = keyword();
                          {if (true) return t.image;}
    } else if (jj_2_5(3)) {
      t = integerToken();
                               {if (true) return t.image;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public LispNode listElement() throws ParseException {
                           String t; LispNode l;
    if (jj_2_6(3)) {
      t = value();
                        {if (true) return new LispNode(t);}
    } else if (jj_2_7(3)) {
      l = list();
                       {if (true) return l;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Token keyword() throws ParseException {
                   Token t;
    if (jj_2_8(3)) {
      t = jj_consume_token(PRIMITIVE_PART);
    } else if (jj_2_9(3)) {
      t = jj_consume_token(VARIABLE_ARRAY_TYPE);
    } else if (jj_2_10(3)) {
      t = jj_consume_token(ACTIVE);
    } else if (jj_2_11(3)) {
      t = jj_consume_token(PASSIVE);
    } else if (jj_2_12(3)) {
      t = jj_consume_token(INPUT);
    } else if (jj_2_13(3)) {
      t = jj_consume_token(INP);
    } else if (jj_2_14(3)) {
      t = jj_consume_token(OUTPUT);
    } else if (jj_2_15(3)) {
      t = jj_consume_token(NAMED_TYPE);
    } else if (jj_2_16(3)) {
      t = jj_consume_token(NUMERIC_TYPE);
    } else if (jj_2_17(3)) {
      t = jj_consume_token(BOOL_FALSE);
    } else if (jj_2_18(3)) {
      t = jj_consume_token(PARAMETERS);
    } else if (jj_2_19(3)) {
      t = jj_consume_token(PARAM);
    } else if (jj_2_20(3)) {
      t = jj_consume_token(PORTS);
    } else if (jj_2_21(3)) {
      t = jj_consume_token(PORT);
    } else if (jj_2_22(3)) {
      t = jj_consume_token(SYNC_PORT);
    } else if (jj_2_23(3)) {
      t = jj_consume_token(ARRAYED_PORT);
    } else if (jj_2_24(3)) {
      t = jj_consume_token(ARRAYED_SYNC_PORT);
    } else if (jj_2_25(3)) {
      t = jj_consume_token(SYMBOL);
    } else if (jj_2_26(3)) {
      t = jj_consume_token(CENTER_STRING);
    } else if (jj_2_27(3)) {
      t = jj_consume_token(IMPLEMENTATION);
    } else if (jj_2_28(3)) {
      t = jj_consume_token(TYPE_STRING);
    } else if (jj_2_29(3)) {
      t = jj_consume_token(TYPE_CARDINAL);
    } else if (jj_2_30(3)) {
      t = jj_consume_token(TYPE_BOOLEAN);
    } else if (jj_2_31(3)) {
      t = jj_consume_token(TYPE_BINARYOPERATOR);
    } else if (jj_2_32(3)) {
      t = jj_consume_token(TYPE_UNARYOPERATOR);
    } else if (jj_2_33(3)) {
      t = jj_consume_token(CASE);
    } else if (jj_2_34(3)) {
      t = jj_consume_token(ELSE);
    } else if (jj_2_35(3)) {
      t = jj_consume_token(STRING_APPEND);
    } else if (jj_2_36(3)) {
      t = jj_consume_token(NUMBER_TO_STRING);
    } else if (jj_2_37(3)) {
      t = jj_consume_token(PLUS);
    } else if (jj_2_38(3)) {
      t = jj_consume_token(SYNC);
    } else if (jj_2_39(3)) {
      t = jj_consume_token(PUSH);
    } else if (jj_2_40(3)) {
      t = jj_consume_token(PULL);
    } else if (jj_2_41(3)) {
      t = jj_consume_token(CHANNELS);
    } else if (jj_2_42(3)) {
      t = jj_consume_token(ATTRIBUTES);
    } else if (jj_2_43(3)) {
      t = jj_consume_token(COMPONENTS);
    } else if (jj_2_44(3)) {
      t = jj_consume_token(COMPONENT);
    } else if (jj_2_45(3)) {
      t = jj_consume_token(BREEZE_PART);
    } else if (jj_2_46(3)) {
      t = jj_consume_token(TYPE);
    } else if (jj_2_47(3)) {
      t = jj_consume_token(IMPORT);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public ParameterType type() throws ParseException {
                         ParameterType result; String typeName;
    if (jj_2_55(3)) {
      jj_consume_token(OBR);
      if (jj_2_53(3)) {
        jj_consume_token(TYPE_STRING);
                                result = ParameterType.STRING;
      } else if (jj_2_54(3)) {
        jj_consume_token(NAMED_TYPE);
        if (jj_2_48(3)) {
          jj_consume_token(TYPE_CARDINAL);
                                          result = ParameterType.CARDINAL;
        } else if (jj_2_49(3)) {
          jj_consume_token(TYPE_BOOLEAN);
                                         result = ParameterType.BOOLEAN;
        } else if (jj_2_50(3)) {
          jj_consume_token(TYPE_BINARYOPERATOR);
                                                result = ParameterType.BINARY_OPERATOR;
        } else if (jj_2_51(3)) {
          jj_consume_token(TYPE_UNARYOPERATOR);
                                               result = ParameterType.UNARY_OPERATOR;
        } else if (jj_2_52(3)) {
          typeName = value();
                                             result = ParameterType.OTHER;
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(CBR);
    } else if (jj_2_56(3)) {
      numericType();
                          result = ParameterType.CARDINAL;
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public ParameterDeclaration parameter() throws ParseException {
  String name;
  ParameterType type;
    jj_consume_token(OBR);
    name = value();
    type = type();
    listBody();
    jj_consume_token(CBR);
          {if (true) return new ParameterDeclaration (name, type);}
    throw new Error("Missing return statement in function");
  }

  final public List<ParameterDeclaration> parameters() throws ParseException {
   ArrayList<ParameterDeclaration> result = new ArrayList<ParameterDeclaration>();
   ParameterDeclaration o;
    jj_consume_token(OBR);
    jj_consume_token(PARAMETERS);
    label_2:
    while (true) {
      if (jj_2_57(3)) {
        ;
      } else {
        break label_2;
      }
      o = parameter();
                   result.add(o);
    }
    jj_consume_token(CBR);
   {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public boolean dataDirectionIsInput() throws ParseException {
    if (jj_2_60(3)) {
      if (jj_2_58(3)) {
        jj_consume_token(INPUT);
      } else if (jj_2_59(3)) {
        jj_consume_token(INP);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
                          {if (true) return true;}
    } else if (jj_2_61(3)) {
      jj_consume_token(OUTPUT);
                     {if (true) return false;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Token integerToken() throws ParseException {
  Token t;
    if (jj_2_62(3)) {
      t = jj_consume_token(INTEGER);
    } else if (jj_2_63(3)) {
      t = jj_consume_token(ZERO);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
                                       {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public int integer() throws ParseException {
        Token t;
    t = integerToken();
                {if (true) return Integer.parseInt(t.image);}
    throw new Error("Missing return statement in function");
  }

  final public Expression<Integer> constantIntegerExpression() throws ParseException {
        int result;
    result = integer();
          {if (true) return new Constant<Integer>(result);}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> constantStringExpression() throws ParseException {
        String s;
    s = value();
   {if (true) return new Constant<String>(s);}
    throw new Error("Missing return statement in function");
  }

  final public Expression<?> parameterizedExpression() throws ParseException {
        String paramName;
    jj_consume_token(OBR);
    jj_consume_token(PARAM);
    paramName = value();
    jj_consume_token(CBR);
          {if (true) return new ParameterReference<Object>(paramName);}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> numberToStringExpression() throws ParseException {
  Expression<Integer> intExpression;
    jj_consume_token(OBR);
    jj_consume_token(NUMBER_TO_STRING);
    intExpression = integerExpression();
    jj_consume_token(CBR);
          {if (true) return new ToStringExpression<Integer>(intExpression);}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> stringAppendExpression() throws ParseException {
        Expression<String> result;
        Expression<String> str2;
    jj_consume_token(OBR);
    jj_consume_token(STRING_APPEND);
    result = stringAppendBody();
    jj_consume_token(CBR);
          {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> stringAppendBody() throws ParseException {
        Expression<String> str;
        List<Expression<String>> strs = new ArrayList<Expression<String>>();
    label_3:
    while (true) {
      if (jj_2_64(3)) {
        ;
      } else {
        break label_3;
      }
      str = stringExpression();
                                    strs.add(str);
    }
          {if (true) return new StringConcatenateExpression(strs);}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> stringCaseExpression() throws ParseException {
        Expression<String> condition;
        Expression<String> value;

        Expression<String> toCheck;
        List<Expression<String>> conditions = new ArrayList<Expression<String>>();
        List<Expression<String>> values = new ArrayList<Expression<String>>();
        Expression<String> elseValue;
    jj_consume_token(OBR);
    jj_consume_token(CASE);
    toCheck = stringExpression();
    label_4:
    while (true) {
      if (jj_2_65(3)) {
        ;
      } else {
        break label_4;
      }
      jj_consume_token(OBR);
      jj_consume_token(OBR);
      condition = stringExpression();
      jj_consume_token(CBR);
      value = stringExpression();
      jj_consume_token(CBR);
                          conditions.add(condition); values.add(value);
    }
    jj_consume_token(OBR);
    jj_consume_token(ELSE);
    elseValue = stringExpression();
    jj_consume_token(CBR);
    jj_consume_token(CBR);
          {if (true) return new CaseExpression<String, String>(toCheck, conditions, values, elseValue);}
    throw new Error("Missing return statement in function");
  }

  final public Expression<Integer> addExpression() throws ParseException {
        List<Expression<Integer>> args = new ArrayList<Expression<Integer>>();
    jj_consume_token(OBR);
    jj_consume_token(PLUS);
    label_5:
    while (true) {
      if (jj_2_66(3)) {
        ;
      } else {
        break label_5;
      }
      integerExpression();
    }
    jj_consume_token(CBR);
                {if (true) return new AddExpression(args);}
    throw new Error("Missing return statement in function");
  }

  final public Expression<Integer> integerExpression() throws ParseException {
        Expression<?> result;
    if (jj_2_67(3)) {
      result = parameterizedExpression();
    } else if (jj_2_68(3)) {
      result = constantIntegerExpression();
    } else if (jj_2_69(3)) {
      result = addExpression();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
         {if (true) return (Expression<Integer>)result;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> implicitNumberToString() throws ParseException {
        Expression<Integer> res;
    res = integerExpression();
         {if (true) return new ToStringExpression(res);}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> stringExpression() throws ParseException {
        Expression<?> result;
    if (jj_2_70(3)) {
      result = parameterizedExpression();
    } else if (jj_2_71(3)) {
      result = constantStringExpression();
    } else if (jj_2_72(3)) {
      result = stringCaseExpression();
    } else if (jj_2_73(3)) {
      result = stringAppendExpression();
    } else if (jj_2_74(3)) {
      result = numberToStringExpression();
    } else if (jj_2_75(3)) {
      result = implicitNumberToString();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
         {if (true) return new ToStringExpression((Expression<Object>) result);}
    throw new Error("Missing return statement in function");
  }

  final public Expression<Integer> numericType() throws ParseException {
        Expression<Integer> result;
    jj_consume_token(OBR);
    jj_consume_token(NUMERIC_TYPE);
    jj_consume_token(BOOL_FALSE);
    result = integerExpression();
    jj_consume_token(CBR);
                {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public VariableArrayType variable_array_type() throws ParseException {
        Expression<Integer> defaultWidth;
        Expression<Integer> portCount;
        Expression<String> specification;
    jj_consume_token(OBR);
    jj_consume_token(VARIABLE_ARRAY_TYPE);
    defaultWidth = numericType();
    jj_consume_token(ZERO);
    portCount = integerExpression();
    specification = stringExpression();
    jj_consume_token(CBR);
          {if (true) return new VariableArrayType(defaultWidth, portCount, specification);}
    throw new Error("Missing return statement in function");
  }

  final public boolean isActive() throws ParseException {
    if (jj_2_76(3)) {
      jj_consume_token(ACTIVE);
                   {if (true) return true;}
    } else if (jj_2_77(3)) {
      jj_consume_token(PASSIVE);
                      {if (true) return false;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Expression<Integer> arrayCount() throws ParseException {
    jj_consume_token(ZERO);
          {if (true) return integerExpression();}
    throw new Error("Missing return statement in function");
  }

  final public PortDeclaration arrayedSyncPort(String name, boolean isActive) throws ParseException {
        Expression<Integer> count;
    count = arrayCount();
          {if (true) return PortDeclaration.createArrayedSync(name, isActive, count);}
    throw new Error("Missing return statement in function");
  }

  final public PortDeclaration arrayedDataPort(String name, boolean isActive) throws ParseException {
        Expression<Integer> count;
        Expression<Integer[]> width;
        Expression<Integer> simpleWidth;
        boolean isInput;
    count = arrayCount();
    isInput = dataDirectionIsInput();
    if (jj_2_78(3)) {
      width = variable_array_type();
    } else if (jj_2_79(3)) {
      simpleWidth = numericType();
                                                                      width = new ConstantArrayType(simpleWidth, count);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return PortDeclaration.createArrayedData(name, isActive, count, isInput, width);}
    throw new Error("Missing return statement in function");
  }

  final public PortDeclaration simpleSyncPort(String name, boolean isActive) throws ParseException {
          {if (true) return PortDeclaration.createSync(name, isActive);}
    throw new Error("Missing return statement in function");
  }

  final public PortDeclaration simpleDataPort(String name, boolean isActive) throws ParseException {
        Expression<Integer> width;
        boolean isInput;
    isInput = dataDirectionIsInput();
    width = numericType();
          {if (true) return PortDeclaration.createData(name, isActive, isInput, width);}
    throw new Error("Missing return statement in function");
  }

  final public PortDeclaration port() throws ParseException {
  PortDeclaration result; String name; boolean isActive;
    jj_consume_token(OBR);
    if (jj_2_80(3)) {
      jj_consume_token(PORT);
      name = value();
      isActive = isActive();
      result = simpleDataPort(name, isActive);
    } else if (jj_2_81(3)) {
      jj_consume_token(SYNC_PORT);
      name = value();
      isActive = isActive();
      result = simpleSyncPort(name, isActive);
    } else if (jj_2_82(3)) {
      jj_consume_token(ARRAYED_PORT);
      name = value();
      isActive = isActive();
      result = arrayedDataPort(name, isActive);
    } else if (jj_2_83(3)) {
      jj_consume_token(ARRAYED_SYNC_PORT);
      name = value();
      isActive = isActive();
      result = arrayedSyncPort(name, isActive);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    listBody();
    jj_consume_token(CBR);
                {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public List<PortDeclaration> ports() throws ParseException {
        ArrayList<PortDeclaration> result = new ArrayList<PortDeclaration>();
        PortDeclaration o;
    jj_consume_token(OBR);
    jj_consume_token(PORTS);
    label_6:
    while (true) {
      if (jj_2_84(3)) {
        ;
      } else {
        break label_6;
      }
      o = port();
                      result.add(o);
    }
    jj_consume_token(CBR);
         {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> symbol() throws ParseException {
                                Expression<String> str;
    jj_consume_token(OBR);
    jj_consume_token(SYMBOL);
    jj_consume_token(OBR);
    jj_consume_token(CENTER_STRING);
    str = stringAppendBody();
    jj_consume_token(CBR);
    jj_consume_token(CBR);
          {if (true) return str;}
    throw new Error("Missing return statement in function");
  }

  final public PrimitivePart primitivePart() throws ParseException {
        String name;
        List<ParameterDeclaration> parameters;
        Expression<String> symbol;
        List<PortDeclaration> ports;
    jj_consume_token(OBR);
    jj_consume_token(PRIMITIVE_PART);
    name = value();
    parameters = parameters();
    ports = ports();
    symbol = symbol();
    listBody();
    jj_consume_token(CBR);
    {if (true) return new PrimitivePart(name, parameters, ports, symbol);}
    throw new Error("Missing return statement in function");
  }

  final public void attributes() throws ParseException {
    list();
  }

  final public ChannelDeclaration channel() throws ParseException {
        ChannelType type;
        int bits = 0;
    jj_consume_token(OBR);
    if (jj_2_87(3)) {
      jj_consume_token(SYNC);
                         type = ChannelType.SYNC;
    } else if (jj_2_88(3)) {
      if (jj_2_85(3)) {
        jj_consume_token(PULL);
                          type = ChannelType.PULL;
      } else if (jj_2_86(3)) {
        jj_consume_token(PUSH);
                            type = ChannelType.PUSH;
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      bits = integer();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    listBody();
    jj_consume_token(CBR);
          {if (true) return new ChannelDeclaration(type, bits);}
    throw new Error("Missing return statement in function");
  }

  final public List<ChannelDeclaration> channels() throws ParseException {
        List<ChannelDeclaration> list = new ArrayList<ChannelDeclaration>();
        ChannelDeclaration channel;
    jj_consume_token(OBR);
    jj_consume_token(CHANNELS);
    label_7:
    while (true) {
      if (jj_2_89(3)) {
        ;
      } else {
        break label_7;
      }
      channel = channel();
                               list.add(channel);
    }
    jj_consume_token(CBR);
          {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final public List<String> paramValues() throws ParseException {
        List<String> values = new ArrayList<String>();
        String value;
    jj_consume_token(OBR);
    label_8:
    while (true) {
      if (jj_2_90(3)) {
        ;
      } else {
        break label_8;
      }
      value = value();
                          values.add(value);
    }
    jj_consume_token(CBR);
         {if (true) return values;}
    throw new Error("Missing return statement in function");
  }

  final public List<List<Integer>> connections() throws ParseException {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        List<Integer> subList;
    jj_consume_token(OBR);
    label_9:
    while (true) {
      if (jj_2_91(3)) {
        ;
      } else {
        break label_9;
      }
      subList = intList();
                              result.add(subList);
    }
    jj_consume_token(CBR);
         {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public List<Integer> intList() throws ParseException {
        List<Integer> result;
        int val;
    if (jj_2_92(3)) {
      result = plainIntList();
    } else if (jj_2_93(3)) {
      val = integer();
                                  result = new LinkedList<Integer>(); result.add(val);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public List<Integer> plainIntList() throws ParseException {
        List<Integer> result = new ArrayList<Integer>();
        Integer value;
    jj_consume_token(OBR);
    label_10:
    while (true) {
      if (jj_2_94(3)) {
        ;
      } else {
        break label_10;
      }
      value = integer();
                            result.add(value);
    }
    jj_consume_token(CBR);
         {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public RawBreezePartReference component() throws ParseException {
        String name;
        List<String> parameters;
        List<List<Integer>> connections;
    jj_consume_token(OBR);
    jj_consume_token(COMPONENT);
    name = value();
    parameters = paramValues();
    connections = connections();
    jj_consume_token(CBR);
                {if (true) return new RawBreezePartReference(name, parameters, connections);}
    throw new Error("Missing return statement in function");
  }

  final public List<RawBreezePartReference> components() throws ParseException {
        List<RawBreezePartReference> list = new ArrayList<RawBreezePartReference>();
        RawBreezePartReference part;
    jj_consume_token(OBR);
    jj_consume_token(COMPONENTS);
    label_11:
    while (true) {
      if (jj_2_95(3)) {
        ;
      } else {
        break label_11;
      }
      part = component();
                             list.add(part);
    }
    jj_consume_token(CBR);
         {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final public BreezePart breezePart() throws ParseException {
        String name;
        List<PortDeclaration> ports;
        List<ChannelDeclaration> channels;
        List<RawBreezePartReference> components;
    jj_consume_token(OBR);
    jj_consume_token(BREEZE_PART);
    name = value();
    ports = ports();
    attributes();
    channels = channels();
    components = components();
    listBody();
    jj_consume_token(CBR);
          {if (true) return new BreezePart(name, ports, channels, components);}
    throw new Error("Missing return statement in function");
  }

  final public void typeDefinition() throws ParseException {
    jj_consume_token(OBR);
    jj_consume_token(TYPE);
    listBody();
    jj_consume_token(CBR);
  }

  final public void breezeDef(List<BreezePart> defs) throws ParseException {
                                         BreezePart def;
    if (jj_2_96(3)) {
      typeDefinition();
    } else if (jj_2_97(3)) {
      def = breezePart();
          defs.add(def);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void importDef() throws ParseException {
    jj_consume_token(OBR);
    jj_consume_token(IMPORT);
    listBody();
    jj_consume_token(CBR);
  }

  final public List<BreezePart> breezeFile() throws ParseException {
                                  List<BreezePart > defs = new LinkedList<BreezePart >();
    label_12:
    while (true) {
      if (jj_2_98(3)) {
        ;
      } else {
        break label_12;
      }
      importDef();
    }
    label_13:
    while (true) {
      if (jj_2_99(3)) {
        ;
      } else {
        break label_13;
      }
      breezeDef(defs);
    }
         {if (true) return defs;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  private boolean jj_2_48(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  private boolean jj_2_49(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  private boolean jj_2_50(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(49, xla); }
  }

  private boolean jj_2_51(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_51(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(50, xla); }
  }

  private boolean jj_2_52(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_52(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(51, xla); }
  }

  private boolean jj_2_53(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_53(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(52, xla); }
  }

  private boolean jj_2_54(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_54(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(53, xla); }
  }

  private boolean jj_2_55(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_55(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(54, xla); }
  }

  private boolean jj_2_56(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_56(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(55, xla); }
  }

  private boolean jj_2_57(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_57(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(56, xla); }
  }

  private boolean jj_2_58(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_58(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(57, xla); }
  }

  private boolean jj_2_59(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_59(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(58, xla); }
  }

  private boolean jj_2_60(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_60(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(59, xla); }
  }

  private boolean jj_2_61(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_61(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(60, xla); }
  }

  private boolean jj_2_62(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_62(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(61, xla); }
  }

  private boolean jj_2_63(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_63(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(62, xla); }
  }

  private boolean jj_2_64(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_64(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(63, xla); }
  }

  private boolean jj_2_65(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_65(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(64, xla); }
  }

  private boolean jj_2_66(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_66(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(65, xla); }
  }

  private boolean jj_2_67(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_67(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(66, xla); }
  }

  private boolean jj_2_68(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_68(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(67, xla); }
  }

  private boolean jj_2_69(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_69(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(68, xla); }
  }

  private boolean jj_2_70(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_70(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(69, xla); }
  }

  private boolean jj_2_71(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_71(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(70, xla); }
  }

  private boolean jj_2_72(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_72(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(71, xla); }
  }

  private boolean jj_2_73(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_73(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(72, xla); }
  }

  private boolean jj_2_74(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_74(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(73, xla); }
  }

  private boolean jj_2_75(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_75(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(74, xla); }
  }

  private boolean jj_2_76(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_76(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(75, xla); }
  }

  private boolean jj_2_77(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_77(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(76, xla); }
  }

  private boolean jj_2_78(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_78(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(77, xla); }
  }

  private boolean jj_2_79(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_79(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(78, xla); }
  }

  private boolean jj_2_80(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_80(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(79, xla); }
  }

  private boolean jj_2_81(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_81(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(80, xla); }
  }

  private boolean jj_2_82(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_82(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(81, xla); }
  }

  private boolean jj_2_83(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_83(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(82, xla); }
  }

  private boolean jj_2_84(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_84(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(83, xla); }
  }

  private boolean jj_2_85(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_85(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(84, xla); }
  }

  private boolean jj_2_86(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_86(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(85, xla); }
  }

  private boolean jj_2_87(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_87(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(86, xla); }
  }

  private boolean jj_2_88(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_88(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(87, xla); }
  }

  private boolean jj_2_89(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_89(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(88, xla); }
  }

  private boolean jj_2_90(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_90(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(89, xla); }
  }

  private boolean jj_2_91(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_91(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(90, xla); }
  }

  private boolean jj_2_92(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_92(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(91, xla); }
  }

  private boolean jj_2_93(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_93(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(92, xla); }
  }

  private boolean jj_2_94(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_94(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(93, xla); }
  }

  private boolean jj_2_95(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_95(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(94, xla); }
  }

  private boolean jj_2_96(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_96(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(95, xla); }
  }

  private boolean jj_2_97(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_97(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(96, xla); }
  }

  private boolean jj_2_98(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_98(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(97, xla); }
  }

  private boolean jj_2_99(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_99(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(98, xla); }
  }

  private boolean jj_3_41() {
    if (jj_scan_token(CHANNELS)) return true;
    return false;
  }

  private boolean jj_3_66() {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3_40() {
    if (jj_scan_token(PULL)) return true;
    return false;
  }

  private boolean jj_3_39() {
    if (jj_scan_token(PUSH)) return true;
    return false;
  }

  private boolean jj_3_38() {
    if (jj_scan_token(SYNC)) return true;
    return false;
  }

  private boolean jj_3_37() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3_36() {
    if (jj_scan_token(NUMBER_TO_STRING)) return true;
    return false;
  }

  private boolean jj_3_35() {
    if (jj_scan_token(STRING_APPEND)) return true;
    return false;
  }

  private boolean jj_3_34() {
    if (jj_scan_token(ELSE)) return true;
    return false;
  }

  private boolean jj_3_33() {
    if (jj_scan_token(CASE)) return true;
    return false;
  }

  private boolean jj_3_32() {
    if (jj_scan_token(TYPE_UNARYOPERATOR)) return true;
    return false;
  }

  private boolean jj_3_31() {
    if (jj_scan_token(TYPE_BINARYOPERATOR)) return true;
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_scan_token(OBR)) return true;
    if (jj_scan_token(PLUS)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_66()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(CBR)) return true;
    return false;
  }

  private boolean jj_3_30() {
    if (jj_scan_token(TYPE_BOOLEAN)) return true;
    return false;
  }

  private boolean jj_3_29() {
    if (jj_scan_token(TYPE_CARDINAL)) return true;
    return false;
  }

  private boolean jj_3_28() {
    if (jj_scan_token(TYPE_STRING)) return true;
    return false;
  }

  private boolean jj_3_27() {
    if (jj_scan_token(IMPLEMENTATION)) return true;
    return false;
  }

  private boolean jj_3_26() {
    if (jj_scan_token(CENTER_STRING)) return true;
    return false;
  }

  private boolean jj_3_25() {
    if (jj_scan_token(SYMBOL)) return true;
    return false;
  }

  private boolean jj_3_65() {
    if (jj_scan_token(OBR)) return true;
    if (jj_scan_token(OBR)) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3_24() {
    if (jj_scan_token(ARRAYED_SYNC_PORT)) return true;
    return false;
  }

  private boolean jj_3_23() {
    if (jj_scan_token(ARRAYED_PORT)) return true;
    return false;
  }

  private boolean jj_3_22() {
    if (jj_scan_token(SYNC_PORT)) return true;
    return false;
  }

  private boolean jj_3_21() {
    if (jj_scan_token(PORT)) return true;
    return false;
  }

  private boolean jj_3_20() {
    if (jj_scan_token(PORTS)) return true;
    return false;
  }

  private boolean jj_3_19() {
    if (jj_scan_token(PARAM)) return true;
    return false;
  }

  private boolean jj_3_18() {
    if (jj_scan_token(PARAMETERS)) return true;
    return false;
  }

  private boolean jj_3_17() {
    if (jj_scan_token(BOOL_FALSE)) return true;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_scan_token(NUMERIC_TYPE)) return true;
    return false;
  }

  private boolean jj_3_99() {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_scan_token(NAMED_TYPE)) return true;
    return false;
  }

  private boolean jj_3_98() {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_scan_token(OUTPUT)) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_scan_token(INP)) return true;
    return false;
  }

  private boolean jj_3_84() {
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_scan_token(INPUT)) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_scan_token(PASSIVE)) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_scan_token(ACTIVE)) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_scan_token(VARIABLE_ARRAY_TYPE)) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_scan_token(PRIMITIVE_PART)) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_scan_token(OBR)) return true;
    if (jj_scan_token(IMPORT)) return true;
    if (jj_3R_43()) return true;
    if (jj_scan_token(CBR)) return true;
    return false;
  }

  private boolean jj_3R_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3_20()) {
    jj_scanpos = xsp;
    if (jj_3_21()) {
    jj_scanpos = xsp;
    if (jj_3_22()) {
    jj_scanpos = xsp;
    if (jj_3_23()) {
    jj_scanpos = xsp;
    if (jj_3_24()) {
    jj_scanpos = xsp;
    if (jj_3_25()) {
    jj_scanpos = xsp;
    if (jj_3_26()) {
    jj_scanpos = xsp;
    if (jj_3_27()) {
    jj_scanpos = xsp;
    if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_3_29()) {
    jj_scanpos = xsp;
    if (jj_3_30()) {
    jj_scanpos = xsp;
    if (jj_3_31()) {
    jj_scanpos = xsp;
    if (jj_3_32()) {
    jj_scanpos = xsp;
    if (jj_3_33()) {
    jj_scanpos = xsp;
    if (jj_3_34()) {
    jj_scanpos = xsp;
    if (jj_3_35()) {
    jj_scanpos = xsp;
    if (jj_3_36()) {
    jj_scanpos = xsp;
    if (jj_3_37()) {
    jj_scanpos = xsp;
    if (jj_3_38()) {
    jj_scanpos = xsp;
    if (jj_3_39()) {
    jj_scanpos = xsp;
    if (jj_3_40()) {
    jj_scanpos = xsp;
    if (jj_3_41()) {
    jj_scanpos = xsp;
    if (jj_3_42()) {
    jj_scanpos = xsp;
    if (jj_3_43()) {
    jj_scanpos = xsp;
    if (jj_3_44()) {
    jj_scanpos = xsp;
    if (jj_3_45()) {
    jj_scanpos = xsp;
    if (jj_3_46()) {
    jj_scanpos = xsp;
    if (jj_3_47()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_scan_token(OBR)) return true;
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3_7()) return true;
    }
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3_97() {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_42() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_96()) {
    jj_scanpos = xsp;
    if (jj_3_97()) return true;
    }
    return false;
  }

  private boolean jj_3_96() {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3_83() {
    if (jj_scan_token(ARRAYED_SYNC_PORT)) return true;
    if (jj_3R_17()) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(QUOTED_VALUE)) return true;
    return false;
  }

  private boolean jj_3R_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3_5()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(VALUE)) return true;
    return false;
  }

  private boolean jj_3_82() {
    if (jj_scan_token(ARRAYED_PORT)) return true;
    if (jj_3R_17()) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_scan_token(OBR)) return true;
    if (jj_scan_token(TYPE)) return true;
    if (jj_3R_43()) return true;
    if (jj_scan_token(CBR)) return true;
    return false;
  }

  private boolean jj_3_64() {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_45() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_64()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_81() {
    if (jj_scan_token(SYNC_PORT)) return true;
    if (jj_3R_17()) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3_80() {
    if (jj_scan_token(PORT)) return true;
    if (jj_3R_17()) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3_79() {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_scan_token(OBR)) return true;
    if (jj_scan_token(BREEZE_PART)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_scan_token(OBR)) return true;
    if (jj_3R_43()) return true;
    if (jj_scan_token(CBR)) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_scan_token(OBR)) return true;
    if (jj_scan_token(STRING_APPEND)) return true;
    if (jj_3R_45()) return true;
    if (jj_scan_token(CBR)) return true;
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_scan_token(OBR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_80()) {
    jj_scanpos = xsp;
    if (jj_3_81()) {
    jj_scanpos = xsp;
    if (jj_3_82()) {
    jj_scanpos = xsp;
    if (jj_3_83()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_43() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_1()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_95() {
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_scan_token(OBR)) return true;
    if (jj_scan_token(NUMBER_TO_STRING)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_scan_token(OBR)) return true;
    if (jj_scan_token(PARAM)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3_78() {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_scan_token(OBR)) return true;
    if (jj_scan_token(COMPONENT)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3_94() {
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_scan_token(OBR)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_94()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(CBR)) return true;
    return false;
  }

  private boolean jj_3_63() {
    if (jj_scan_token(ZERO)) return true;
    return false;
  }

  private boolean jj_3_93() {
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3_92() {
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3_77() {
    if (jj_scan_token(PASSIVE)) return true;
    return false;
  }

  private boolean jj_3R_36() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_92()) {
    jj_scanpos = xsp;
    if (jj_3_93()) return true;
    }
    return false;
  }

  private boolean jj_3R_32() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_76()) {
    jj_scanpos = xsp;
    if (jj_3_77()) return true;
    }
    return false;
  }

  private boolean jj_3_76() {
    if (jj_scan_token(ACTIVE)) return true;
    return false;
  }

  private boolean jj_3_59() {
    if (jj_scan_token(INP)) return true;
    return false;
  }

  private boolean jj_3_62() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_62()) {
    jj_scanpos = xsp;
    if (jj_3_63()) return true;
    }
    return false;
  }

  private boolean jj_3_61() {
    if (jj_scan_token(OUTPUT)) return true;
    return false;
  }

  private boolean jj_3_91() {
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3_58() {
    if (jj_scan_token(INPUT)) return true;
    return false;
  }

  private boolean jj_3_60() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_58()) {
    jj_scanpos = xsp;
    if (jj_3_59()) return true;
    }
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_scan_token(OBR)) return true;
    if (jj_scan_token(VARIABLE_ARRAY_TYPE)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3_90() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3_57() {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_scan_token(OBR)) return true;
    if (jj_scan_token(NUMERIC_TYPE)) return true;
    if (jj_scan_token(BOOL_FALSE)) return true;
    return false;
  }

  private boolean jj_3_52() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_scan_token(OBR)) return true;
    if (jj_3R_17()) return true;
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3_51() {
    if (jj_scan_token(TYPE_UNARYOPERATOR)) return true;
    return false;
  }

  private boolean jj_3_75() {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3_74() {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3_50() {
    if (jj_scan_token(TYPE_BINARYOPERATOR)) return true;
    return false;
  }

  private boolean jj_3_73() {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3_89() {
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3_72() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3_49() {
    if (jj_scan_token(TYPE_BOOLEAN)) return true;
    return false;
  }

  private boolean jj_3_71() {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3_48() {
    if (jj_scan_token(TYPE_CARDINAL)) return true;
    return false;
  }

  private boolean jj_3_70() {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3_56() {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3_86() {
    if (jj_scan_token(PUSH)) return true;
    return false;
  }

  private boolean jj_3_85() {
    if (jj_scan_token(PULL)) return true;
    return false;
  }

  private boolean jj_3_88() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_85()) {
    jj_scanpos = xsp;
    if (jj_3_86()) return true;
    }
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_70()) {
    jj_scanpos = xsp;
    if (jj_3_71()) {
    jj_scanpos = xsp;
    if (jj_3_72()) {
    jj_scanpos = xsp;
    if (jj_3_73()) {
    jj_scanpos = xsp;
    if (jj_3_74()) {
    jj_scanpos = xsp;
    if (jj_3_75()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_87() {
    if (jj_scan_token(SYNC)) return true;
    return false;
  }

  private boolean jj_3_54() {
    if (jj_scan_token(NAMED_TYPE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_48()) {
    jj_scanpos = xsp;
    if (jj_3_49()) {
    jj_scanpos = xsp;
    if (jj_3_50()) {
    jj_scanpos = xsp;
    if (jj_3_51()) {
    jj_scanpos = xsp;
    if (jj_3_52()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_53() {
    if (jj_scan_token(TYPE_STRING)) return true;
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_scan_token(OBR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_87()) {
    jj_scanpos = xsp;
    if (jj_3_88()) return true;
    }
    if (jj_3R_43()) return true;
    if (jj_scan_token(CBR)) return true;
    return false;
  }

  private boolean jj_3_69() {
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3_55() {
    if (jj_scan_token(OBR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_53()) {
    jj_scanpos = xsp;
    if (jj_3_54()) return true;
    }
    if (jj_scan_token(CBR)) return true;
    return false;
  }

  private boolean jj_3_68() {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_44() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_55()) {
    jj_scanpos = xsp;
    if (jj_3_56()) return true;
    }
    return false;
  }

  private boolean jj_3_67() {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3_47() {
    if (jj_scan_token(IMPORT)) return true;
    return false;
  }

  private boolean jj_3_46() {
    if (jj_scan_token(TYPE)) return true;
    return false;
  }

  private boolean jj_3_45() {
    if (jj_scan_token(BREEZE_PART)) return true;
    return false;
  }

  private boolean jj_3R_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_67()) {
    jj_scanpos = xsp;
    if (jj_3_68()) {
    jj_scanpos = xsp;
    if (jj_3_69()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_44() {
    if (jj_scan_token(COMPONENT)) return true;
    return false;
  }

  private boolean jj_3_43() {
    if (jj_scan_token(COMPONENTS)) return true;
    return false;
  }

  private boolean jj_3_42() {
    if (jj_scan_token(ATTRIBUTES)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public BreezeParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[99];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public BreezeParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public BreezeParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new BreezeParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public BreezeParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new BreezeParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public BreezeParser(BreezeParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(BreezeParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[52];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 52; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 99; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
            case 47: jj_3_48(); break;
            case 48: jj_3_49(); break;
            case 49: jj_3_50(); break;
            case 50: jj_3_51(); break;
            case 51: jj_3_52(); break;
            case 52: jj_3_53(); break;
            case 53: jj_3_54(); break;
            case 54: jj_3_55(); break;
            case 55: jj_3_56(); break;
            case 56: jj_3_57(); break;
            case 57: jj_3_58(); break;
            case 58: jj_3_59(); break;
            case 59: jj_3_60(); break;
            case 60: jj_3_61(); break;
            case 61: jj_3_62(); break;
            case 62: jj_3_63(); break;
            case 63: jj_3_64(); break;
            case 64: jj_3_65(); break;
            case 65: jj_3_66(); break;
            case 66: jj_3_67(); break;
            case 67: jj_3_68(); break;
            case 68: jj_3_69(); break;
            case 69: jj_3_70(); break;
            case 70: jj_3_71(); break;
            case 71: jj_3_72(); break;
            case 72: jj_3_73(); break;
            case 73: jj_3_74(); break;
            case 74: jj_3_75(); break;
            case 75: jj_3_76(); break;
            case 76: jj_3_77(); break;
            case 77: jj_3_78(); break;
            case 78: jj_3_79(); break;
            case 79: jj_3_80(); break;
            case 80: jj_3_81(); break;
            case 81: jj_3_82(); break;
            case 82: jj_3_83(); break;
            case 83: jj_3_84(); break;
            case 84: jj_3_85(); break;
            case 85: jj_3_86(); break;
            case 86: jj_3_87(); break;
            case 87: jj_3_88(); break;
            case 88: jj_3_89(); break;
            case 89: jj_3_90(); break;
            case 90: jj_3_91(); break;
            case 91: jj_3_92(); break;
            case 92: jj_3_93(); break;
            case 93: jj_3_94(); break;
            case 94: jj_3_95(); break;
            case 95: jj_3_96(); break;
            case 96: jj_3_97(); break;
            case 97: jj_3_98(); break;
            case 98: jj_3_99(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
