package org.workcraft.plugins.stg.tools

import org.workcraft.dependencymanager.advanced.core.GlobalCache._
// import org.workcraft.plugins.petri.tools.PetriNetSpecific._
import org.workcraft.util.Maybe.Util._

import java.awt.Color
import java.awt.Component
import java.awt.geom.Point2D
import java.util.Map

import javax.swing.JLabel
import javax.swing.JPanel

import org.workcraft.dom.Node
import org.workcraft.dom.visual.HitMan
import org.workcraft.dom.visual.Touchable
import org.workcraft.dom.visual.TouchableProvider
import org.workcraft.dom.visual.VisualGroup
import org.workcraft.gui.SimpleFlowLayout
import org.workcraft.plugins.petri.tools.SimControl
import org.workcraft.plugins.petri.tools.SimStateControl
import org.workcraft.plugins.petri.tools.SimulationControlPanel
import org.workcraft.plugins.petri.tools.SimulationState
import org.workcraft.plugins.petri.tools.SimulationTool
import org.workcraft.plugins.petri.tools.SimulationTraceTable
import org.workcraft.util.Hierarchy

object StgSimulationTool {
    val inputsColor = Color.RED.darker
    val outputsColor = Color.BLUE.darker
    val internalsColor = Color.GREEN.darker

    def createSimulationTool(root : VisualGroup, stg : STG, touchableProvider : TouchableProvider[Node]) : SimulationTool[String] = {

        val traceTable = new SimulationTraceTable[Map[Place,Integer]](petriNetAsSimulationModel(stg), getTableCellRenderer(stg))
        val simControl = traceTable.asSimControl
        val controlPanel = new SimulationControlPanel[SimulationState[Map[Place,Integer]]](traceTable.getSimControl)
        val simStateControl = controlPanel.asStateControl
        
        val interfacePanel = new JPanel(new SimpleFlowLayout(5, 5))

        for(controlComponent <- controlPanel.components)
            interfacePanel.add(controlComponent)
        
        for(controlComponent <- traceTable.components)
            interfacePanel.add(controlComponent)
        
        val hitTester = getHitTester(stg, touchableProvider, root)
        val nodeEventExtractor = PetriNetSpecific.nodeEventExtractor(stg)
        
        new SimulationTool[String](simControl, simStateControl, hitTester, nodeEventExtractor, interfacePanel)
    }

    def getTableCellRenderer (net : PetriNetModel) : (String, Boolean) => Component = (transitionId, isActive) => {
      val label = new JLabel
      label.setOpaque(true)
      label.setForeground(Color.BLACK)
                
      label.setText(transitionId)
                
      val fore = eval(PetriNetSettings.enabledForegroundColor)
      val back = eval(PetriNetSettings.enabledBackgroundColor)
    
      if (isActive) {
        if (fore!=null&&back!=null) { 
          label.setBackground(fore)
          label.setForeground(back)
        } else {
          label.setBackground(Color.YELLOW)
        }
      } else {
        label.setBackground(Color.WHITE)
      }
    
      val n = eval(net.referenceManager).getNodeByReference(transitionId)
      if (n instanceof SignalTransition) {
        val st = (SignalTransition)n
	st.signalType match {
          case INPUT    => label.setForeground(inputsColor)
          case OUTPUT   => label.setForeground(outputsColor)
          case INTERNAL => label.setForeground(internalsColor)
        }
      }
                
      label
    }
}

class STGSimulationTool {
    def getHitTester(net : PetriNetModel, touchableProvider : TouchableProvider[Node], visualRoot : Node) : Point2D => Option[String] = {
        val tp : Node => Option[Touchable] = eval(TouchableProvider.Util.asAWhole(touchableProvider))

        (position => {
          val node = new HitMan.Instance[Node](Hierarchy.children, tp).hitDeepest(position, visualRoot, new Function[Node, Boolean] {
                    override def apply(node : Node) : Boolean = {
                        return node instanceof VisualSignalTransition && net.isEnabled(((VisualSignalTransition) node).getReferencedTransition)
                    }
          })
          if(node == null)
              return nothing
        else
                    return just(eval(net.referenceManager).getNodeReference(((VisualSignalTransition) node).getReferencedTransition))
        })
    }
}
