/**
 * JavaCC file
 */
 
options {
  JDK_VERSION = "1.5";
  LOOKAHEAD = 1;
  STATIC = false;
  OUTPUT_DIRECTORY = "generated";
}

PARSER_BEGIN(DotGParser)
package org.workcraft.plugins.stg.javacc.generated;

import java.util.HashMap;
import java.util.List;
import java.util.LinkedList;
import java.util.Map;

import org.workcraft.dependencymanager.advanced.user.StorageManager;
import org.workcraft.dom.Node;
import org.workcraft.plugins.stg.SignalTransition.Direction;
import org.workcraft.plugins.stg.SignalTransition.Type;
import org.workcraft.plugins.stg.*;
import org.workcraft.util.Pair;
import org.workcraft.util.Triple;
import org.workcraft.exceptions.InvalidConnectionException;
import org.workcraft.exceptions.FormatException;
import org.workcraft.exceptions.NotFoundException;

import static org.workcraft.dependencymanager.advanced.core.GlobalCache.*;

public class DotGParser {
  DotGParserHelper helper;
}
PARSER_END(DotGParser)

< * > SKIP :
{
 	" "
|	"\t"
|	<"#" (~["\r","\n"])* (["\r", "\n"])*>
}

< IGNORE_REST > TOKEN:
{
	<REST : (~["\r", "\n", "#"])*> : DEFAULT
}

TOKEN :
{
	<LINEBREAK: (["\r", "\n"])+>
  	| <INPUT_HEADER: ".inputs">
  	| <OUTPUT_HEADER: ".outputs">
  	| <INTERNAL_HEADER: ".internal">
  	| <DUMMY_HEADER: ".dummy">
  	| <GRAPH: ".graph">
  	| <MARKING: ".marking">
  	| <CAPACITY: ".capacity">
	| <UNSUPPORTED_HEADER: "." <NAME>> : IGNORE_REST
  	| <NAME: ["A"-"Z","a"-"z","_"](["_","A"-"Z","a"-"z","0"-"9"])*>
  	| <DIRECTION: ["+","-","~"]>
  	| <INTEGER: (["0"-"9"])+>
  	| "{" | "}" | "<" | ">" | "," | "/" | "="
	| <ANY : ~[]>
}

STG parse(StorageManager storage) : { }
{
	{ helper = new DotGParserHelper(this, storage); }
	 ( header() <LINEBREAK> )*
	 graph()
	 ( footer() <LINEBREAK> )*
	 <EOF>
	 {return helper.stg;}
}

void header() : { List<String> list; }
{
  	(<LINEBREAK>)?
	(
	  	<INPUT_HEADER> list = signalList() { helper.setSignalsType (list, Type.INPUT); }
		|<OUTPUT_HEADER> list = signalList() { helper.setSignalsType (list, Type.OUTPUT); }
		|<INTERNAL_HEADER> list = signalList() { helper.setSignalsType (list, Type.INTERNAL); }
		|<DUMMY_HEADER> list = signalList() { helper.setSignalsType (list, Type.DUMMY); }
		|<UNSUPPORTED_HEADER> <REST>
	)
}

List<String> signalList() : { Token t; List<String> list = new LinkedList<String>(); }
{
	( t = <NAME> { list.add (t.image); } ) * 
	{return list;}
}

void footer() : { }
{
	<MARKING> marking()
	|<CAPACITY> capacity()
	|<UNSUPPORTED_HEADER> <REST>
}

void capacity() : { }
{
	(capacityEntry()) *
}

void capacityEntry() : { STGPlace p; int value; }
{
	 ( 
	 	(p = implicitPlaceReference() | p =  explicitPlaceReference())
	        value = assignment()
	 )
	 {
	 	p.capacity().setValue(value);
	 }
}

void marking() : { }
{
	"{" (markingEntry()) * "}"
}

int assignment() : { Token t; }
{
	"=" t = <INTEGER> { return Integer.parseInt(t.image); }
}

void markingEntry() : { STGPlace p; int value = 1; }
{
	 ( 
	 	(p = implicitPlaceReference() | p =  explicitPlaceReference())
	        ( value = assignment() ) ?
	 )
	 {
	 	p.tokens().setValue(value);
	 }
}

STGPlace implicitPlaceReference() : 
{
  	Node t1, t2;
	Token t;
	Integer tokens = null;
}
{
	("<" t1 = anyTransition() "," t2 = anyTransition() ">")
	{
		return helper.getImplicitPlace(t1,t2);
	}
}

STGPlace explicitPlaceReference() : 
{
	Token t;
	String name;
	Integer tokens = null;
}
{
	( t = <NAME> { name = t.image; } )
	{
		return helper.getPlace(name);
	}
}

void graph() : { }
{
	<GRAPH> <LINEBREAK>
	( graphLine() <LINEBREAK> )*
}

Triple<String, Direction, Integer> signalTransition() : 
{
	Token t;
	String name;
	Direction direction;
	Integer instance = null;
}
{
	t = <NAME> { name = t.image; }
	t = <DIRECTION> { direction = Direction.fromString(t.image);}
	(
		( "/" t = <INTEGER> ) { instance = Integer.parseInt(t.image); } 
	)? 
	
	{ return Triple.of (name, direction, instance); }	
	
}

Pair<String, Integer> dummyTransition() :
{
	Token t;
	String name;
	Integer instance = null;
}
{
	t = <NAME> { name = t.image; }
	( "/" t = <INTEGER>  { instance = Integer.parseInt(t.image); } )?
	
	{ return Pair.of (name, instance); }	
	
}

Node anyTransition() :
{
	Triple<String, Direction, Integer> r;
	Pair<String, Integer> r2;
	Node t;
}
{
	(
	  LOOKAHEAD(signalTransition())
	  r = signalTransition() { t = helper.getOrCreate(r); }
	| r2 = dummyTransition() { t = helper.getOrCreate(r2); }
)
	{
		return t;
	}
}

void graphLine() : 
{
	Token t;
	Node from, to;
}
{
	(
	  LOOKAHEAD(<NAME>(<DIRECTION>|"/"))
	  from = anyTransition()
	| t = <NAME> { from = helper.getOrCreate(t.image); }
	)

	(
		(
	  LOOKAHEAD(<NAME>(<DIRECTION>|"/"))
		to = anyTransition()
		| t = <NAME> { to = helper.getOrCreate(t.image); }
		) { helper.createArc(from, to); } 
	)* 	
}
